/**
 * @file PromptPreview.tsx
 * @description
 * Displays a read-only preview of the final flattened prompt generated by
 * concatenating all blocks. Uses the flattenPrompt() utility to produce
 * the plain text prompt. This preview is toggled in PromptBuilder when the user
 * wants to see the final prompt in a plain-text format.
 *
 * Key Responsibilities:
 *  - Compute final prompt text using flattenPrompt()
 *  - Render the result in a scrollable area
 *  - Provide read-only viewing (i.e., user can't edit in this component)
 *
 * @notes
 *  - Could be extended to handle copy-to-clipboard directly, but in Step 12,
 *    we just focus on generating and showing the final text. (Step 13 adds copying.)
 *  - We keep the styling minimal, using a <textarea> or <pre> for display.
 *    <pre> is more natural for read-only text with newlines.
 */

import React, { useMemo } from 'react';
import { usePrompt } from '../../context/PromptContext';
import { flattenBlocks } from '../../utils/flattenPrompt';

const PromptPreview: React.FC = () => {
  const { blocks } = usePrompt();

  /**
   * Use memoization to avoid re-flattening every render if blocks haven't changed.
   */
  const flattenedPrompt = useMemo(() => {
    return flattenBlocks(blocks);
  }, [blocks]);

  return (
    <div className="mt-4 p-4 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 rounded h-64 overflow-auto">
      <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2">
        Final Prompt Preview
      </h3>
      <pre className="text-xs whitespace-pre-wrap leading-snug text-gray-800 dark:text-gray-100">
        {flattenedPrompt}
      </pre>
    </div>
  );
};

export default PromptPreview;
