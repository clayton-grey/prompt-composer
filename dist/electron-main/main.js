"use strict";
/**
 * @file main.ts
 * @description
 * This file is the main entry point for the Electron application. It creates
 * the main BrowserWindow and handles all top-level app events such as
 * 'window-all-closed' and 'activate' for macOS.
 *
 * Key Responsibilities:
 *  - Create and manage the main application window
 *  - Load the React frontend (from dev server in development, or from
 *    built files in production)
 *  - Handle lifecycle events like app ready, window closed, etc.
 *
 * @notes
 *  - We conditionally load from "http://localhost:3000" when in development
 *    to enable live reload of the React app.
 *  - In production, we load the built index.html output from the
 *    dist folder generated by Vite.
 *  - We enable contextIsolation and disable nodeIntegration for security.
 *  - This file depends on the "preload.ts" script for safe bridging to the
 *    renderer if needed.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const path_1 = __importDefault(require("path"));
const process = __importStar(require("process"));
let mainWindow = null;
/**
 * Creates the main application window with specified settings.
 * Loads the appropriate URL depending on whether it's dev or prod.
 */
function createWindow() {
    mainWindow = new electron_1.BrowserWindow({
        width: 1200,
        height: 800,
        title: 'Prompt Composer',
        webPreferences: {
            // preload script path references the compiled JS if you're using TS
            preload: path_1.default.join(__dirname, 'preload.js'),
            nodeIntegration: false,
            contextIsolation: true
        }
    });
    // If developing, load from local dev server
    // If building for production, load the local dist index.html
    if (process.env.NODE_ENV === 'development') {
        mainWindow.loadURL('http://localhost:3000');
        mainWindow.webContents.openDevTools();
    }
    else {
        // In production, load from the Vite-built dist directory
        const indexHtmlPath = path_1.default.join(__dirname, '..', '..', 'dist', 'index.html');
        console.log('Loading production file from:', indexHtmlPath);
        mainWindow.loadFile(indexHtmlPath).catch(err => {
            console.error('Failed to load index.html:', err);
            console.log('Current directory:', __dirname);
        });
    }
    mainWindow.on('closed', () => {
        mainWindow = null;
    });
}
// Electron `ready` event listener
electron_1.app.whenReady().then(() => {
    createWindow();
    // On macOS, it's common to recreate a window when the doc icon is clicked
    // and there are no other windows open.
    electron_1.app.on('activate', () => {
        if (electron_1.BrowserWindow.getAllWindows().length === 0) {
            createWindow();
        }
    });
});
// Quit when all windows are closed, except on macOS
electron_1.app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        electron_1.app.quit();
    }
});
//# sourceMappingURL=main.js.map